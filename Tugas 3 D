#include <windows.h>
#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif
#include <math.h>

#define PI 3.1415927

boolean diff = true, spec = true, amb = true;
float theta = 0.0,up=0.0,inc = 0;
static int slices = 16;
static int stacks = 16;

void bagianutama(float rbase,float rtop,float height);
void bagiansisi(float rbase,float rtop,float height);
//static float a = 10, b =-10,c =-70;

//seting pencahayaan

//GLfloat ambient_light[]={0.3,0.3,0.45,1.0};
GLfloat ambient_light[]= {0.45,0.45,0.45,1.0}; //GL_LIGHT0, GL_LIGHT1, GL_LIGHT2, GL_LIGHT3
//GLfloat  source_light[]={0.9,0.8,0.8,1.0};
GLfloat  source_light[]= {0.9,0.9,0.9,1.0};
//GLfloat     light_pos[]={7.0,0.0,1.0,1.0};
GLfloat     light_pos[]= {5.0,0.0,6.0,1.0};

void solid(float x1,float y1,float z1,float x2,float y2,float z2){
    //depan
    glNormal3f(0.0,0.0,1.0);
    glVertex3f(x1,y1,z2);
    glVertex3f(x2,y1,z2);
    glVertex3f(x2,y2,z2);
    glVertex3f(x1,y2,z2);

    //belakang
    glNormal3f(0.0,0.0,-1.0);
    glVertex3f(x1,y2,z1);
    glVertex3f(x2,y2,z1);
    glVertex3f(x2,y1,z1);
    glVertex3f(x1,y1,z1);

    //samping kiri
    glNormal3f(-1.0,0.0,0.0);
    glVertex3f(x1,y1,z1);
    glVertex3f(x1,y1,z2);
    glVertex3f(x1,y2,z2);
    glVertex3f(x1,y2,z1);

    //samping kanan
    glNormal3f(1.0,0.0,0.0);
    glVertex3f(x2,y1,z1);
    glVertex3f(x2,y2,z1);
    glVertex3f(x2,y2,z2);
    glVertex3f(x2,y1,z2);

    //bawah
    glNormal3f(0.0,-1.0,0.0);
    glVertex3f(x2,y1,z2);
    glVertex3f(x1,y1,z2);
    glVertex3f(x1,y1,z1);
    glVertex3f(x2,y1,z1);

    //atas
    glNormal3f(0.0,1.0,0.0);
    glVertex3f(x1,y2,z2);
    glVertex3f(x2,y2,z2);
    glVertex3f(x2,y2,z1);
    glVertex3f(x1,y2,z1);
}

void cone(){
    glColor3f(0.8,0.8,0.8);
    glutSolidCone(2,5,150,150);
}
void cylinder(GLfloat radius,GLfloat height,GLubyte R,GLubyte G,GLubyte B){
    GLfloat x              = 0.0;
    GLfloat y              = 0.0;
    GLfloat angle          = 0.0;
    GLfloat angle_stepsize = 0.1;
    /** Draw the tube */
    glColor3ub(R-40,G-40,B-40);

    glBegin(GL_QUAD_STRIP);
    angle = 0.0;
        while( angle < 2*PI ) {

            x = radius * cos(angle);
            y = radius * sin(angle);
            glVertex3f(x, y , height);
            glVertex3f(x, y , 0.0);
            angle = angle + angle_stepsize;
//            glNormal3f(0.0,-1.0,0.0);
        }
        glVertex3f(radius, 0.0, height);
        glVertex3f(radius, 0.0, 0.0);
    glEnd();
    /** Draw the circle on top of cylinder */
    glColor3ub(R,G,B);
    glBegin(GL_POLYGON);

    angle = 0.0;
        while( angle < 2*PI ) {
            //glNormal3f(1.0,1.0,0.0);
            x = radius * cos(angle);
            y = radius * sin(angle);
            glVertex3f(x, y , height);
            angle = angle + angle_stepsize;
        }
        glVertex3f(radius, 0.0, height);
    glEnd();
}

void display()
{
    glClear(GL_COLOR_BUFFER_BIT| GL_DEPTH_BUFFER_BIT);

    glLoadIdentity();

    glRotated(theta,0,1,0);
        // untuk ground
    glPushMatrix();
        glBegin(GL_QUADS);
            glColor3b(0,110,0);
            solid(-12,-9,10,15,-8.5,-10);
            //untuk tiang
            glColor3b(30,30,30);
            solid(-12,-9,10,-10,7,8);
            solid(-12,-9,-8,-10,7,-10);
            solid(13,-9,10,15,7,8);
            solid(13,-9,-8,15,7,-10);
        glEnd();
    glPopMatrix();

    // untuk roket
    glPushMatrix();
    glTranslated(0,0+up,0);
        glBegin(GL_QUADS);
            glColor3b(110,0,0);
            solid(1,-9,2,2,-2,1);
            solid(1,-9,-3,2,-2,-4);
            solid(-1.5,-9,-0.5,-0.5,-2,-1.5);
            solid(3.5,-9,-0.5,4.5,-2,-1.5);
        glEnd();
    glPopMatrix();

    glPushMatrix();
    glTranslated(1.5,5+up,-1);
    glRotated(-90,1,0,0);
    cone();
    glPopMatrix();

    glPushMatrix();
    glTranslated(1.5,-7+up,-1);
    glRotated(-90,1,0,0);
    cone();
    glPopMatrix();

    glTranslated(1.5,5+up,-1);
    glPushMatrix();
        glRotated(90,1,0,0);
        solid(-0.15,-0.5,4.6,0.15,-0.2,4.7);
        cylinder(2,10,20,20,5);

        glTranslated(-1,-2,2);
        cylinder(0.8,8,0,100,70);

        glRotated(10,1,0,100);
        cylinder(0.8,8,0,100,70);
    glPopMatrix();
    glPopMatrix();
    glFlush();
}

void reshape (int w, int h){
    glViewport (0, 0, (GLsizei) w, (GLsizei) h);
    glMatrixMode (GL_PROJECTION);
    glLoadIdentity();
    if (w <= h)
        glOrtho (-10, 10, -10*(GLfloat)h/(GLfloat)w, 10*(GLfloat)h/(GLfloat)w, - 20.0, 20.0);
    else
        glOrtho (-10*(GLfloat)w/(GLfloat)h, 10*(GLfloat)w/(GLfloat)h, -10, 10, -20.0, 20.0);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
 }

void myinit(){
    glClearColor (0.5, 0.5, 0.5, 1.0);
    glColor3f(0.0, 0.0, 0.0);
    glShadeModel(GL_SMOOTH);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();

    glEnable (GL_DEPTH_TEST);
    glPolygonMode   (GL_FRONT_AND_BACK,GL_FILL);
    glEnable (GL_LIGHTING); // pemanggilan parameter lihghting
    glLightModelfv  (GL_LIGHT_MODEL_AMBIENT,ambient_light);
    glLightfv (GL_LIGHT0,GL_DIFFUSE,source_light);
    glLightfv (GL_LIGHT0,GL_POSITION,light_pos);
    glEnable (GL_LIGHT0);
    glEnable (GL_COLOR_MATERIAL);
    glColorMaterial (GL_FRONT,GL_AMBIENT_AND_DIFFUSE);

}

 void mykey(unsigned char key, int mouseX, int mouseY){
    if (key=='1'){
        if (amb == true){
            GLfloat ambient_light[] = { 0.3, 0.3, 0.3, 1.0 };
            glLightModelfv(GL_LIGHT_MODEL_AMBIENT,ambient_light);
            amb = false;
        }
        else{
            GLfloat ambient_light[] = { 0.9, 0.9, 0.9, 1.0 };
            glLightModelfv(GL_LIGHT_MODEL_AMBIENT,ambient_light);
            amb = true;
        }
    }
    if (key=='2'){
        if (diff == true){
            glDisable(GL_LIGHT0);
            diff = false;
        }
        else{
            glEnable(GL_LIGHT0);
            diff = true;
        }
    }
    if (key=='3'){
        if (spec == true){
            glDisable(GL_LIGHT1);
            spec = false;
        }
        else{
            glEnable(GL_LIGHT1);
            spec = true;
        }
    }
    if((key == 'c' ) || (key == 'C' )){
        inc = 0.001;
    }
    display();
 }

 void myIdle(){
    up +=inc;
    theta +=0.03;
    display();
 }

int main(int argc, char* argv[]){
	glutInit(&argc,argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);
	glutInitWindowSize (1024, 600);
    glutInitWindowPosition (20, 75);
    glutCreateWindow("Tugas 3D");
	glutDisplayFunc(display);
	glutReshapeFunc(reshape);
	glutIdleFunc(myIdle);
	glutKeyboardFunc(mykey);
	myinit();
	glutMainLoop();
	return 0;
}
